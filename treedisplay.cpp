#include <iostream>
#include <vector>
#include <string>
#include <limits>

using namespace std;


struct Node {
    string name;                 // t√™n th∆∞ m·ª•c
    string type;                 // "FILE" or "FOLDER"
    int parentIndex;             // ch·ªâ s·ªë cha trong m·∫£ng FileSystem
    vector<int> childrenIndices; // danh s√°ch c√°c con
};

vector<Node> FileSystem; // M·∫£ng l∆∞u tr·ªØ to√†n b·ªô c√¢y th∆∞ m·ª•c

// THU·∫¨T TO√ÅN 1: TH√äM TH∆Ø M·ª§C
string Add_Folder(int parentIndex, const string &folderName) {
    // B1: Ki·ªÉm tra h·ª£p l·ªá
    if (parentIndex < 0 || parentIndex >= (int)FileSystem.size() ||
        FileSystem[parentIndex].type != "FOLDER")
        return "‚ùå L·ªói: Th∆∞ m·ª•c cha kh√¥ng h·ª£p l·ªá.";
    // B2: Ki·ªÉm tra tr√πng t√™n
    for (int childIndex : FileSystem[parentIndex].childrenIndices) {
        if (FileSystem[childIndex].name == folderName)
            return "‚ùå L·ªói: Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i.";
    }
    // B3: T·∫°o node m·ªõi
    Node newNode;
    newNode.name = folderName;
    newNode.type = "FOLDER";
    newNode.parentIndex = parentIndex;

    // B4 : Th√™m v√†o m·∫£ng ch√≠nh
    FileSystem.push_back(newNode);
    int newIndex = (int)FileSystem.size() - 1;
    FileSystem[parentIndex].childrenIndices.push_back(newIndex);

    return "‚úÖ Th√™m th∆∞ m·ª•c th√†nh c√¥ng.";
}

// THU·∫¨T TO√ÅN 2: TH√äM T·ªÜP TIN
string Add_File(int parentIndex, const string &fileName) {
    // B1: Ki·ªÉm tra h·ª£p l·ªá
    if (parentIndex < 0 || parentIndex >= (int)FileSystem.size() ||
        FileSystem[parentIndex].type != "FOLDER")
        return "‚ùå L·ªói: Th∆∞ m·ª•c cha kh√¥ng h·ª£p l·ªá.";

    // B2: Ki·ªÉm tra tr√πng t√™n
    for (int childIndex : FileSystem[parentIndex].childrenIndices) {
        if (FileSystem[childIndex].name == fileName)
            return "‚ùå L·ªói: File ƒë√£ t·ªìn t·∫°i.";
    }

    // B3: T·∫°o node m·ªõi
    Node newNode;
    newNode.name = fileName;
    newNode.type = "FILE";
    newNode.parentIndex = parentIndex;

    // B4 : Th√™m v√†o m·∫£ng ch√≠nh
    FileSystem.push_back(newNode);
    int newIndex = (int)FileSystem.size() - 1;
    FileSystem[parentIndex].childrenIndices.push_back(newIndex);

    return "‚úÖ Th√™m file th√†nh c√¥ng.";
}

// THU·∫¨T TO√ÅN 3: Duy·ªát & in c√¢y
// B1: In c√¢y th∆∞ m·ª•c
void Display_Tree(int nodeIndex, const string &prefix = "", bool isLast = true) {
    if (nodeIndex < 0 || nodeIndex >= (int)FileSystem.size())
        return;

    const Node &node = FileSystem[nodeIndex];

    cout << prefix;
    if (nodeIndex != 0) {
        cout << (isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ");
    }

    // B2: In th√¥ng tin n√∫t hi·ªán t·∫°i
    if (node.type == "FILE")
        cout << "[" << nodeIndex << "] üìÑ " << node.name << endl;
    else
        cout << "[" << nodeIndex << "] üìÅ " << node.name << "/" << endl;


    // B3: Duy·ªát v√† in c√°c con
    for (int i = 0; i < (int)node.childrenIndices.size(); i++) {
        // X√°c ƒë·ªãnh ƒë√¢y c√≥ ph·∫£i l√† con cu·ªëi c√πng c·ªßa node hi·ªán t·∫°i hay kh√¥ng
        bool lastChild = (i == (int)node.childrenIndices.size() - 1);

        // C·∫≠p nh·∫≠t prefix cho con
        string nextPrefix = prefix + (nodeIndex == 0 ? "" : (isLast ? "    " : "‚îÇ   "));

        // G·ªçi ƒë·ªá quy ƒë·ªÉ in to√†n b·ªô c√¢y con
        Display_Tree(node.childrenIndices[i], nextPrefix, lastChild);
    }
}
// H√†m t√¨m ki·∫øm theo t√™n (b·ªï sung)
void Search_NodeByName(const string &keyword) {
    bool found = false;
    cout << "K·∫øt qu·∫£ t√¨m ki·∫øm cho \"" << keyword << "\":\n";
    for (int i = 0; i < (int)FileSystem.size(); i++) {
        if (FileSystem[i].name.find(keyword) != string::npos) {
            cout << "[" << i << "] "
                 << (FileSystem[i].type == "FILE" ? "üìÑ " : "üìÅ ")
                 << FileSystem[i].name;

            int p = FileSystem[i].parentIndex;
            if (p >= 0)
                cout << " (trong: " << FileSystem[p].name << ")\n";
            else
                cout << " (th∆∞ m·ª•c g·ªëc)\n";

            found = true;
        }
    }
    if (!found) cout << "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.\n";
}

// T·∫°o m·ªôt s·ªë d·ªØ li·ªáu m·∫´u ƒë·ªÉ ti·ªán demo
void Mau() {
    cout << Add_Folder(0, "Documents") << endl;
    cout << Add_Folder(0, "Pictures") << endl;
    cout << Add_File(1, "Report.docx") << endl;
    cout << Add_File(2, "Photo.png") << endl;
    cout << Add_Folder(1, "Homework") << endl;
    cout << Add_File(4, "BaiTap1.cpp") << endl;
}

// Menu thao t√°c (b·ªï sung)
int main() {
    // T·∫°o root
    Node root;
    root.name = "Root";
    root.type = "FOLDER";
    root.parentIndex = -1;
    FileSystem.push_back(root);

    // T·∫°o d·ªØ li·ªáu m·∫´u
    Mau();

    cout << "Tr√¨nh ch·ªânh s·ª≠a c√¢y th∆∞ m·ª•c ƒë∆°n gi·∫£n. Nh·∫≠p l·ªánh ƒë·ªÉ ch·ªânh s·ª≠a h·ªá th·ªëng t·ªáp ·∫£o.\n";
    cout << "L·ªánh:\n";
    cout << "  1 - Th√™m th∆∞ m·ª•c\n";
    cout << "  2 - Th√™m t·ªáp\n";
    cout << "  3 - Hi·ªÉn th·ªã c√¢y th∆∞ m·ª•c\n";
    cout << "  4 - Tr·ª£ gi√∫p\n";
    cout << "  5 - T√¨m ki·∫øm t√™n\n";
    cout << "  0 - Tho√°t\n";

    while (true) {
        cout << "\n> ";
        int cmd;
        if (!(cin >> cmd)) {
            // EOF ho·∫∑c ƒë·∫ßu v√†o l·ªói -> tho√°t v√≤ng l·∫∑p
            break;
        }

        if (cmd == 0) {
            break;
        }

        switch (cmd) {
            case 1: {
                int parent;
                cout << "Ch·ªâ s·ªë th∆∞ m·ª•c cha: ";
                if (!(cin >> parent)) {
                    cout << "Ch·ªâ s·ªë th∆∞ m·ª•c cha kh√¥ng h·ª£p l·ªá.\n";
                    if (cin.eof()) goto finish;
                    cin.clear();
                    string dummy;
                    getline(cin, dummy);
                    break;
                }
                // lo·∫°i b·ªè kho·∫£ng tr·∫Øng c√≤n s√≥t l·∫°i tr∆∞·ªõc getline
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "T√™n th∆∞ m·ª•c: ";
                string name;
                if (!std::getline(cin, name)) {
                    if (cin.eof()) goto finish;
                    break;
                }
                if (name.empty()) {
                    cout << "T√™n th∆∞ m·ª•c kh√¥ng ƒë∆∞·ª£c r·ªóng.\n";
                    break;
                }
                cout << Add_Folder(parent, name) << endl;
                break;
            }
            case 2: {
                int parent;
                cout << "Ch·ªâ s·ªë th∆∞ m·ª•c cha: ";
                if (!(cin >> parent)) {
                    cout << "Ch·ªâ s·ªë th∆∞ m·ª•c cha kh√¥ng h·ª£p l·ªá.\n";
                    if (cin.eof()) goto finish;
                    cin.clear();
                    string dummy;
                    getline(cin, dummy);
                    break;
                }
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "T√™n t·ªáp: ";
                string name;
                if (!std::getline(cin, name)) {
                    if (cin.eof()) goto finish;
                    break;
                }
                if (name.empty()) {
                    cout << "T√™n t·ªáp kh√¥ng ƒë∆∞·ª£c r·ªóng.\n";
                    break;
                }
                cout << Add_File(parent, name) << endl;
                break;
            }
            case 3:
                cout << "\n===== C·∫§U TR√öC C√ÇY TH∆Ø M·ª§C =====\n";
                Display_Tree(0);
                break;
            case 4:
                cout << "L·ªánh:\n";
                cout << "  1 - Th√™m th∆∞ m·ª•c\n";
                cout << "  2 - Th√™m t·ªáp\n";
                cout << "  3 - Hi·ªÉn th·ªã c√¢y th∆∞ m·ª•c\n";
                cout << "  4 - Tr·ª£ gi√∫p\n";
                cout << "  5 - T√¨m ki·∫øm t√™n\n";
                cout << "  0 - Tho√°t\n";
                break;
            case 5: {
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Nh·∫≠p t√™n c·∫ßn t√¨m: ";
                string keyword;
                getline(cin, keyword);
                if (!keyword.empty())
                    Search_NodeByName(keyword);
                break;
            }
            default:
                cout << "L·ªánh kh√¥ng h·ª£p l·ªá. Nh·∫≠p 4 ƒë·ªÉ xem tr·ª£ gi√∫p.\n";
                break;
        }
    }
finish:
    cout << "Tho√°t. C√¢y th∆∞ m·ª•c cu·ªëi c√πng:\n";
    Display_Tree(0);
    return 0;
}